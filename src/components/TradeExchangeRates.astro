---
import fs from 'fs'
import YAML from 'yaml'


// Utility function to translate "SpaceCash2000" into simply "2000".
function getSpaceCash(string: string) {
    const splitString = string.split(/(\d+)/, 2);
    return splitString[1];
}

const YAMLFolder = './src/assets/data/Hullrot-YAML-Prototypes';

// YML file containing starting inventory of trade dispensaries.
const cargoDispensersFile = fs.readFileSync(`${YAMLFolder}/_Crescent/Catalog/VendingMachines/Inventories/cargodispensaries.yml`, 'utf8');
const cargoDispensers = YAML.parse(cargoDispensersFile, { logLevel: 'error' });

// YML file containing Deed Console and cargo Turn-In Chutes. 
const tradeDispensersFile = fs.readFileSync(`${YAMLFolder}/_Crescent/Entities/Structures/dispensers.yml`, 'utf8');
const tradeDispensers = YAML.parse(tradeDispensersFile, { logLevel: 'error' });

// YML file containing trade goods.
const tradeGoodsFile = fs.readFileSync(`${YAMLFolder}/_Crescent/Entities/Objects/Misc/trade.yml`, 'utf8');
const tradeGoods = YAML.parse(tradeGoodsFile, { logLevel: 'error' });

// Find the NCWL dispensary's starting inventory.
const dispensaryNCWL = cargoDispensers.find(dispenser => dispenser.id == "NovaBelraskaDispensary");

// Find the Deed Console and each station's cargo turn-in chute.
const deedConsole = tradeDispensers.find(dispenser => dispenser.id == "DeedConsole");
const tradeDeedValues = deedConsole.components.find(component => component.type == "Dispenser").inventory;

const cargoChuteNCWL = tradeDispensers.find(dispenser => dispenser.id == "NovaBalreskaCargoChute");
const cargoChuteNCWLDispenser = cargoChuteNCWL.components.find(component => component.type == "Dispenser");

const cargoChuteTFSC = tradeDispensers.find(dispenser => dispenser.id == "GrinningJackalCargoChute");
const cargoChuteTFSCInventory = cargoChuteTFSC.components.find(component => component.type == "Dispenser").inventory;

// Generate a list of trade goods, their prices, and their sell values.
const tradeGoodsList = [];

Object.keys(dispensaryNCWL.startingInventory).forEach(key => {
    try {
        const tradeGood = {};
        const tradeGoodEntry = tradeGoods.find(crate => crate.id == key);

        tradeGood.name = tradeGoodEntry.name;
        tradeGood.price = tradeGoodEntry.components.find(component => component.type == "StaticPrice").price;
        tradeGood.sellValueTFSC = getSpaceCash(tradeDeedValues[cargoChuteTFSCInventory[key]]);
        
        tradeGoodsList.push(tradeGood);
    }
    catch {
        return;
    }
})



---
<table>
    <tr>
        <th>Trade Good</th>
        <th>Purchase Cost</th>
        <th>Sell Value at Freeport</th>
    </tr>
    {tradeGoodsList.map((tradeGood) => <tr><td>{tradeGood.name}</td><td>{tradeGood.price}</td><td>{tradeGood.sellValueTFSC}</td></tr>)}
</table>